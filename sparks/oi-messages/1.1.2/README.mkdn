# Oi!

Oi is a simple library for creating and displaying flash message notifications in Codeigniter websites.  

It offers greater flexibility and simplicity than just using the standard session flashdata methods in CodeIgniter. 

## Installation Instructions

Install OI to your CodeIgniter 2 site just like any other spark:

    php tools/spark install oi/1.1.2
    
Uninstallation is also just like any other spark:

    php tools/spark remove -f oi

See the included user guide for installation on CI 1.7.

## Adding Notifications

Oi uses the php magic method __call() to add any number of different alert types to your application.

### $this->oi->add_{type}()

This method will add an alert to Oi. The first parameter is the alert contents (string).

	$this->oi->add_message('Hello World');

Will create the following html notification

	<p class="oi message">Hello World</p>
	
The second parameter can be used to add any extra attributes to the alert. Pass an associative 	Array.

	$attr = array('id' => 'error-127', 'title' => 'You really should fix this...'); 
             
	$this->oi->add_error('Oops, something went wrong', $attr);

Will create the following html notification 
 
	<p class="oi error" id="error-127" title="'You really should fix this..." >Oops, something went wrong</p>

### Common message types

- message - $this->oi->add_message()
- success - $this->oi->add_success()
- warning - $this->oi->add_warning()
- error - $this->oi->add_error()

You are not limited to these and the type may be any string you choose. 

    $this->oi->add_snide_remark('You caused an error. Again.');

You can even add extra classes to your alerts and include HTML in your alert string.

	$attr = array('class' => 'my-class'); 
	
	$this->oi->add_somereallystupidlylongalertname('<a href="mylink.html">Click</a> me', $attr);

Will create the following html notification

	<p class="oi somereallystupidlylongalertname my-class" ><a href="mylink.html">Click</a> me</p>

## Retrieving Notifications

Generally you should only retrieve notifications from oi within a view. This will mean if a redirect is triggered in your controller any alerts will be retained in the session and displayed in on the next page.

### $this->oi->messages()

Call messages to return all alerts in the session as a string

	$this->oi->messages('');

If you only wish to return messages of a given type, set the first parameter.

	$this->oi->messages('success');

Finally, once a notification has been returned it will automatically be removed from the session unless the second parameter is set to TRUE

	// return all success messages but keep them in the session 
	$this->oi->messages('success', TRUE); 

	// return all messages and keep them all in the session 
	$this->oi->messages(NULL, TRUE);

### $this->oi->has_messages()

The has_messages method can be used to check if there are any messages awaiting display.

This is useful if you would like to wrap messages in a container:

	<? if($this->oi->has_messages(''):?>  
	    <div class="oi-wrapper"> 
	        <? echo $this->oi->messages(NULL)?> 
	    </div> 
	<? endif?>

## CSS

A sample stylesheet is included with this spark for common message types.  To use it as-is:
 
1. In the config/oi.php file, edit the class_prefix value: `$config['class_prefix'] = 'oi-';`
2. Copy the oi.css stylesheet to wherever you keep css assets in your application.

## License

Oi is released under the terms of the [MIT License](http://www.opensource.org/licenses/mit-license.php).

## Contact and Credit

Oi was created and is maintained by [Jim Wardlaw](http://www.stucktogetherwithtape.com).

This spark was created and is maintained by [Max Schwanekamp](https://github.com/anaxamaxan/Oi).
